---
name: CI

on:  # yamllint disable-line rule:truthy
  push:
  pull_request:
  schedule:
    - cron: '20 5 * * 6'  # At 05:20 on Saturday

env:
  OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'  # See ansible/ansible#49207
  PY_COLORS: 1
  ANSIBLE_FORCE_COLOR: 1

jobs:

  lint:
    # nested virtualization is not possible for Ubuntu (issue actions/virtual-environments#183)
    runs-on: macos-10.15

    steps:
      - uses: actions/checkout@v2

      - name: Use Python 3.8
        run: brew install python@3.8

      - name: Install Python dependencies
        run: |
          pip3 install pipenv
          pipenv --rm || true
          pipenv sync

      - name: Execute linters via molecule
        run: |
          pipenv run molecule lint
          pipenv run molecule syntax

  molecule:
    # nested virtualization is not possible for Ubuntu (issue actions/virtual-environments#183)
    runs-on: macos-10.15

    strategy:
      matrix:
        scenario:
          - has-pending-reboot
          - no-pending-reboot
        windows_version:
          - 2008R2
          - 2012R2
          - 2016
          - 2019
        exclude:
          - scenario: no-pending-reboot
            windows_version: 2008R2
          - scenario: no-pending-reboot
            windows_version: 2016

    steps:
      - uses: actions/checkout@v2

      - name: Use Python 3.8
        run: brew install python@3.8

      - name: Install Python dependencies
        run: |
          pip3 install pipenv
          pipenv --rm || true
          pipenv sync

      - name: Create VM
        run: "WIN_VERSION=${{ matrix.windows_version }} \
          pipenv run molecule create --scenario-name ${{ matrix.scenario }}"

      - name: Converge
        run: "WIN_VERSION=${{ matrix.windows_version }} \
          pipenv run molecule converge --scenario-name ${{ matrix.scenario }}"

      - name: Check idempotence
        run: "WIN_VERSION=${{ matrix.windows_version }} \
          pipenv run molecule idempotence --scenario-name ${{ matrix.scenario }}"

      - name: Verify
        run: "WIN_VERSION=${{ matrix.windows_version }} \
          pipenv run molecule verify --scenario-name ${{ matrix.scenario }}"

      - name: Destroy VM
        run: "WIN_VERSION=${{ matrix.windows_version }} \
          pipenv run molecule destroy --scenario-name ${{ matrix.scenario }}"
        if: ${{ always() }}
